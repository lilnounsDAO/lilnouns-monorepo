/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace INounsSeeder {
  export type SeedStruct = {
    background: PromiseOrValue<BigNumberish>;
    body: PromiseOrValue<BigNumberish>;
    accessory: PromiseOrValue<BigNumberish>;
    head: PromiseOrValue<BigNumberish>;
    glasses: PromiseOrValue<BigNumberish>;
  };

  export type SeedStructOutput = [number, number, number, number, number] & {
    background: number;
    body: number;
    accessory: number;
    head: number;
    glasses: number;
  };
}

export interface ILilVRGDAInterface extends utils.Interface {
  functions: {
    "buyNow(uint256,uint256)": FunctionFragment;
    "fetchNextNoun()": FunctionFragment;
    "fetchNoun(uint256)": FunctionFragment;
    "getSeederBlockNumber()": FunctionFragment;
    "pause()": FunctionFragment;
    "setReservePrice(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyNow"
      | "fetchNextNoun"
      | "fetchNoun"
      | "getSeederBlockNumber"
      | "pause"
      | "setReservePrice"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchNextNoun",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchNoun",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeederBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReservePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchNextNoun",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchNoun", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSeederBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AuctionReservePriceUpdated(uint256)": EventFragment;
    "AuctionSettled(uint256,address,uint256)": EventFragment;
    "AuctionUpdateIntervalUpdated(uint256)": EventFragment;
    "PoolSizeUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionUpdateIntervalUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSizeUpdated"): EventFragment;
}

export interface AuctionReservePriceUpdatedEventObject {
  reservePrice: BigNumber;
}
export type AuctionReservePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceUpdatedEventObject
>;

export type AuctionReservePriceUpdatedEventFilter =
  TypedEventFilter<AuctionReservePriceUpdatedEvent>;

export interface AuctionSettledEventObject {
  nounId: BigNumber;
  winner: string;
  amount: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionUpdateIntervalUpdatedEventObject {
  interval: BigNumber;
}
export type AuctionUpdateIntervalUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionUpdateIntervalUpdatedEventObject
>;

export type AuctionUpdateIntervalUpdatedEventFilter =
  TypedEventFilter<AuctionUpdateIntervalUpdatedEvent>;

export interface PoolSizeUpdatedEventObject {
  poolSize: BigNumber;
}
export type PoolSizeUpdatedEvent = TypedEvent<
  [BigNumber],
  PoolSizeUpdatedEventObject
>;

export type PoolSizeUpdatedEventFilter = TypedEventFilter<PoolSizeUpdatedEvent>;

export interface ILilVRGDA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILilVRGDAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyNow(
      expectedBlockNumber: PromiseOrValue<BigNumberish>,
      expectedNounId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchNextNoun(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
        nounId: BigNumber;
        seed: INounsSeeder.SeedStructOutput;
        svg: string;
        price: BigNumber;
        hash: string;
      }
    >;

    fetchNoun(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
        nounId: BigNumber;
        seed: INounsSeeder.SeedStructOutput;
        svg: string;
        price: BigNumber;
        hash: string;
      }
    >;

    getSeederBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyNow(
    expectedBlockNumber: PromiseOrValue<BigNumberish>,
    expectedNounId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchNextNoun(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
      nounId: BigNumber;
      seed: INounsSeeder.SeedStructOutput;
      svg: string;
      price: BigNumber;
      hash: string;
    }
  >;

  fetchNoun(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
      nounId: BigNumber;
      seed: INounsSeeder.SeedStructOutput;
      svg: string;
      price: BigNumber;
      hash: string;
    }
  >;

  getSeederBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePrice(
    reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNow(
      expectedBlockNumber: PromiseOrValue<BigNumberish>,
      expectedNounId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchNextNoun(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
        nounId: BigNumber;
        seed: INounsSeeder.SeedStructOutput;
        svg: string;
        price: BigNumber;
        hash: string;
      }
    >;

    fetchNoun(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, INounsSeeder.SeedStructOutput, string, BigNumber, string] & {
        nounId: BigNumber;
        seed: INounsSeeder.SeedStructOutput;
        svg: string;
        price: BigNumber;
        hash: string;
      }
    >;

    getSeederBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionReservePriceUpdated(uint256)"(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;
    AuctionReservePriceUpdated(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;

    "AuctionSettled(uint256,address,uint256)"(
      nounId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      nounId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter;

    "AuctionUpdateIntervalUpdated(uint256)"(
      interval?: null
    ): AuctionUpdateIntervalUpdatedEventFilter;
    AuctionUpdateIntervalUpdated(
      interval?: null
    ): AuctionUpdateIntervalUpdatedEventFilter;

    "PoolSizeUpdated(uint256)"(poolSize?: null): PoolSizeUpdatedEventFilter;
    PoolSizeUpdated(poolSize?: null): PoolSizeUpdatedEventFilter;
  };

  estimateGas: {
    buyNow(
      expectedBlockNumber: PromiseOrValue<BigNumberish>,
      expectedNounId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchNextNoun(overrides?: CallOverrides): Promise<BigNumber>;

    fetchNoun(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeederBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNow(
      expectedBlockNumber: PromiseOrValue<BigNumberish>,
      expectedNounId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchNextNoun(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchNoun(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeederBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
